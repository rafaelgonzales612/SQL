--In this project I downloaded Spotify data from Kaggle, created a table to insert the data into, and then did analytics on the data using SQL in SQLite Studio

--First I created the table:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

--Next, I inserted the Spotify data .csv into the table and then did an analysis on the data using the following SQL:

--1. What are the top 10 tracks of 2021 based on popularity?
SELECT track_name, artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--2. What is the average tempo of tracks by each artist?
SELECT artist_name, AVG(tempo)
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

--3. Which artists have tracks that are longer than the average duration, and what are those tracks?
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE duration_ms > (SELECT AVG(duration_ms) FROM BIT_DB.Spotifydata)
ORDER BY duration_ms DESC;

--4. How many tracks does each artist have on the list?
SELECT artist_name, COUNT(track_name) AS '# of Tracks'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(track_name) DESC;

--5. Which tracks have below average danceability, energy, and liveness?
SELECT track_name, danceability, energy, liveness
FROM BIT_DB.Spotifydata
WHERE danceability < (SELECT AVG(danceability) FROM BIT_DB.Spotifydata)
AND energy < (SELECT AVG(energy) FROM BIT_DB.Spotifydata)
AND liveness < (SELECT AVG(liveness) FROM BIT_DB.Spotifydata)
ORDER BY danceability DESC, energy DESC, liveness DESC;

--6. Displays tracks and their loudness rating using CASE
SELECT track_name, loudness,
    CASE
        WHEN loudness > -4 THEN 'loud'
        WHEN loudness > -9 THEN 'moderate'
        ELSE 'quiet'
    END AS 'loudness rating'
FROM BIT_DB.Spotifydata;

--7. Which tracks have a slow tempo but above average energy?
SELECT track_name, tempo, energy
FROM BIT_DB.Spotifydata
WHERE energy > (SELECT AVG(energy) FROM BIT_DB.Spotifydata)
ORDER BY tempo ASC;

--8. What is the total duration (in minutes) of all the tracks in this list?
SELECT SUM(duration_ms / 1000) / 60 AS 'Total Duration in Minutes'
FROM BIT_DB.Spotifydata;

--9. Which tracks are not in 4/4 time signature?
SELECT track_name, artist_name, time_signature
FROM BIT_DB.Spotifydata
WHERE time_signature <> 4;

--10. List the tracks and their artist in descending order according to the tracks' acousticness
SELECT track_name, artist_name, acousticness
FROM BIT_DB.Spotifydata
ORDER BY acousticness DESC;
